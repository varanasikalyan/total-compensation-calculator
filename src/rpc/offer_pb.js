// source: offer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.offercomp.Bonus', null, global);
goog.exportSymbol('proto.offercomp.Breakdown', null, global);
goog.exportSymbol('proto.offercomp.GetProjectionsRawRequest', null, global);
goog.exportSymbol('proto.offercomp.GetProjectionsRawResponse', null, global);
goog.exportSymbol('proto.offercomp.GetProjectionsRequest', null, global);
goog.exportSymbol('proto.offercomp.GetProjectionsResponse', null, global);
goog.exportSymbol('proto.offercomp.IncomeProjection', null, global);
goog.exportSymbol('proto.offercomp.IncomeProjectionRaw', null, global);
goog.exportSymbol('proto.offercomp.IncrementCycle', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.Breakdown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.Breakdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.Breakdown.displayName = 'proto.offercomp.Breakdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.Bonus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.Bonus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.Bonus.displayName = 'proto.offercomp.Bonus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.IncrementCycle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.IncrementCycle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.IncrementCycle.displayName = 'proto.offercomp.IncrementCycle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.GetProjectionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.GetProjectionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.GetProjectionsRequest.displayName = 'proto.offercomp.GetProjectionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.IncomeProjection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.IncomeProjection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.IncomeProjection.displayName = 'proto.offercomp.IncomeProjection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.IncomeProjectionRaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.IncomeProjectionRaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.IncomeProjectionRaw.displayName = 'proto.offercomp.IncomeProjectionRaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.GetProjectionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.offercomp.GetProjectionsResponse.repeatedFields_, null);
};
goog.inherits(proto.offercomp.GetProjectionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.GetProjectionsResponse.displayName = 'proto.offercomp.GetProjectionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.GetProjectionsRawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.offercomp.GetProjectionsRawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.GetProjectionsRawRequest.displayName = 'proto.offercomp.GetProjectionsRawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.offercomp.GetProjectionsRawResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.offercomp.GetProjectionsRawResponse.repeatedFields_, null);
};
goog.inherits(proto.offercomp.GetProjectionsRawResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.offercomp.GetProjectionsRawResponse.displayName = 'proto.offercomp.GetProjectionsRawResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.Breakdown.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.Breakdown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.Breakdown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.Breakdown.toObject = function(includeInstance, msg) {
  var f, obj = {
    period: jspb.Message.getFieldWithDefault(msg, 1, ""),
    basic: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hra: jspb.Message.getFieldWithDefault(msg, 3, 0),
    specialAllowance: jspb.Message.getFieldWithDefault(msg, 4, 0),
    others: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.Breakdown}
 */
proto.offercomp.Breakdown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.Breakdown;
  return proto.offercomp.Breakdown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.Breakdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.Breakdown}
 */
proto.offercomp.Breakdown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBasic(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHra(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSpecialAllowance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOthers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.Breakdown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.Breakdown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.Breakdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.Breakdown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeriod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBasic();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getHra();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSpecialAllowance();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getOthers();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string period = 1;
 * @return {string}
 */
proto.offercomp.Breakdown.prototype.getPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.Breakdown} returns this
 */
proto.offercomp.Breakdown.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 basic = 2;
 * @return {number}
 */
proto.offercomp.Breakdown.prototype.getBasic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Breakdown} returns this
 */
proto.offercomp.Breakdown.prototype.setBasic = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 hra = 3;
 * @return {number}
 */
proto.offercomp.Breakdown.prototype.getHra = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Breakdown} returns this
 */
proto.offercomp.Breakdown.prototype.setHra = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 special_allowance = 4;
 * @return {number}
 */
proto.offercomp.Breakdown.prototype.getSpecialAllowance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Breakdown} returns this
 */
proto.offercomp.Breakdown.prototype.setSpecialAllowance = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 others = 5;
 * @return {number}
 */
proto.offercomp.Breakdown.prototype.getOthers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Breakdown} returns this
 */
proto.offercomp.Breakdown.prototype.setOthers = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.Bonus.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.Bonus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.Bonus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.Bonus.toObject = function(includeInstance, msg) {
  var f, obj = {
    isOneTime: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    spreadOverInDays: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paidOver: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startDate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.Bonus}
 */
proto.offercomp.Bonus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.Bonus;
  return proto.offercomp.Bonus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.Bonus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.Bonus}
 */
proto.offercomp.Bonus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOneTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpreadOverInDays(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaidOver(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.Bonus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.Bonus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.Bonus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.Bonus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsOneTime();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSpreadOverInDays();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPaidOver();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional bool is_one_time = 1;
 * @return {boolean}
 */
proto.offercomp.Bonus.prototype.getIsOneTime = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.offercomp.Bonus} returns this
 */
proto.offercomp.Bonus.prototype.setIsOneTime = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 spread_over_in_days = 2;
 * @return {number}
 */
proto.offercomp.Bonus.prototype.getSpreadOverInDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Bonus} returns this
 */
proto.offercomp.Bonus.prototype.setSpreadOverInDays = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 paid_over = 3;
 * @return {number}
 */
proto.offercomp.Bonus.prototype.getPaidOver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Bonus} returns this
 */
proto.offercomp.Bonus.prototype.setPaidOver = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string start_date = 4;
 * @return {string}
 */
proto.offercomp.Bonus.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.Bonus} returns this
 */
proto.offercomp.Bonus.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 amount = 5;
 * @return {number}
 */
proto.offercomp.Bonus.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.Bonus} returns this
 */
proto.offercomp.Bonus.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.IncrementCycle.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.IncrementCycle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.IncrementCycle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.IncrementCycle.toObject = function(includeInstance, msg) {
  var f, obj = {
    financialYearStartMonth: jspb.Message.getFieldWithDefault(msg, 1, ""),
    incrementCycleFrequency: jspb.Message.getFieldWithDefault(msg, 2, 0),
    incrementCycleFirstMonth: jspb.Message.getFieldWithDefault(msg, 3, ""),
    yoyIncrementPercentage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.IncrementCycle}
 */
proto.offercomp.IncrementCycle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.IncrementCycle;
  return proto.offercomp.IncrementCycle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.IncrementCycle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.IncrementCycle}
 */
proto.offercomp.IncrementCycle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinancialYearStartMonth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIncrementCycleFrequency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIncrementCycleFirstMonth(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setYoyIncrementPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.IncrementCycle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.IncrementCycle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.IncrementCycle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.IncrementCycle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFinancialYearStartMonth();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIncrementCycleFrequency();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIncrementCycleFirstMonth();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getYoyIncrementPercentage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string financial_year_start_month = 1;
 * @return {string}
 */
proto.offercomp.IncrementCycle.prototype.getFinancialYearStartMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncrementCycle} returns this
 */
proto.offercomp.IncrementCycle.prototype.setFinancialYearStartMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 increment_cycle_frequency = 2;
 * @return {number}
 */
proto.offercomp.IncrementCycle.prototype.getIncrementCycleFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncrementCycle} returns this
 */
proto.offercomp.IncrementCycle.prototype.setIncrementCycleFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string increment_cycle_first_month = 3;
 * @return {string}
 */
proto.offercomp.IncrementCycle.prototype.getIncrementCycleFirstMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncrementCycle} returns this
 */
proto.offercomp.IncrementCycle.prototype.setIncrementCycleFirstMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string yoy_increment_percentage = 4;
 * @return {string}
 */
proto.offercomp.IncrementCycle.prototype.getYoyIncrementPercentage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncrementCycle} returns this
 */
proto.offercomp.IncrementCycle.prototype.setYoyIncrementPercentage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.GetProjectionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.GetProjectionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.GetProjectionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taxCountry: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ctc: jspb.Message.getFieldWithDefault(msg, 3, 0),
    breakdown: (f = msg.getBreakdown()) && proto.offercomp.Breakdown.toObject(includeInstance, f),
    annualBonus: (f = msg.getAnnualBonus()) && proto.offercomp.Bonus.toObject(includeInstance, f),
    joiningBonus: (f = msg.getJoiningBonus()) && proto.offercomp.Bonus.toObject(includeInstance, f),
    secondAnnualJoiningBonus: (f = msg.getSecondAnnualJoiningBonus()) && proto.offercomp.Bonus.toObject(includeInstance, f),
    incrementCycle: (f = msg.getIncrementCycle()) && proto.offercomp.IncrementCycle.toObject(includeInstance, f),
    dateOfJoining: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.GetProjectionsRequest}
 */
proto.offercomp.GetProjectionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.GetProjectionsRequest;
  return proto.offercomp.GetProjectionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.GetProjectionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.GetProjectionsRequest}
 */
proto.offercomp.GetProjectionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCtc(value);
      break;
    case 4:
      var value = new proto.offercomp.Breakdown;
      reader.readMessage(value,proto.offercomp.Breakdown.deserializeBinaryFromReader);
      msg.setBreakdown(value);
      break;
    case 5:
      var value = new proto.offercomp.Bonus;
      reader.readMessage(value,proto.offercomp.Bonus.deserializeBinaryFromReader);
      msg.setAnnualBonus(value);
      break;
    case 6:
      var value = new proto.offercomp.Bonus;
      reader.readMessage(value,proto.offercomp.Bonus.deserializeBinaryFromReader);
      msg.setJoiningBonus(value);
      break;
    case 7:
      var value = new proto.offercomp.Bonus;
      reader.readMessage(value,proto.offercomp.Bonus.deserializeBinaryFromReader);
      msg.setSecondAnnualJoiningBonus(value);
      break;
    case 8:
      var value = new proto.offercomp.IncrementCycle;
      reader.readMessage(value,proto.offercomp.IncrementCycle.deserializeBinaryFromReader);
      msg.setIncrementCycle(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateOfJoining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.GetProjectionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.GetProjectionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.GetProjectionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaxCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCtc();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBreakdown();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.offercomp.Breakdown.serializeBinaryToWriter
    );
  }
  f = message.getAnnualBonus();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.offercomp.Bonus.serializeBinaryToWriter
    );
  }
  f = message.getJoiningBonus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.offercomp.Bonus.serializeBinaryToWriter
    );
  }
  f = message.getSecondAnnualJoiningBonus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.offercomp.Bonus.serializeBinaryToWriter
    );
  }
  f = message.getIncrementCycle();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.offercomp.IncrementCycle.serializeBinaryToWriter
    );
  }
  f = message.getDateOfJoining();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string tax_country = 1;
 * @return {string}
 */
proto.offercomp.GetProjectionsRequest.prototype.getTaxCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.setTaxCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.offercomp.GetProjectionsRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 ctc = 3;
 * @return {number}
 */
proto.offercomp.GetProjectionsRequest.prototype.getCtc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.setCtc = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Breakdown breakdown = 4;
 * @return {?proto.offercomp.Breakdown}
 */
proto.offercomp.GetProjectionsRequest.prototype.getBreakdown = function() {
  return /** @type{?proto.offercomp.Breakdown} */ (
    jspb.Message.getWrapperField(this, proto.offercomp.Breakdown, 4));
};


/**
 * @param {?proto.offercomp.Breakdown|undefined} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
*/
proto.offercomp.GetProjectionsRequest.prototype.setBreakdown = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.clearBreakdown = function() {
  return this.setBreakdown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.offercomp.GetProjectionsRequest.prototype.hasBreakdown = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Bonus annual_bonus = 5;
 * @return {?proto.offercomp.Bonus}
 */
proto.offercomp.GetProjectionsRequest.prototype.getAnnualBonus = function() {
  return /** @type{?proto.offercomp.Bonus} */ (
    jspb.Message.getWrapperField(this, proto.offercomp.Bonus, 5));
};


/**
 * @param {?proto.offercomp.Bonus|undefined} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
*/
proto.offercomp.GetProjectionsRequest.prototype.setAnnualBonus = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.clearAnnualBonus = function() {
  return this.setAnnualBonus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.offercomp.GetProjectionsRequest.prototype.hasAnnualBonus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Bonus joining_bonus = 6;
 * @return {?proto.offercomp.Bonus}
 */
proto.offercomp.GetProjectionsRequest.prototype.getJoiningBonus = function() {
  return /** @type{?proto.offercomp.Bonus} */ (
    jspb.Message.getWrapperField(this, proto.offercomp.Bonus, 6));
};


/**
 * @param {?proto.offercomp.Bonus|undefined} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
*/
proto.offercomp.GetProjectionsRequest.prototype.setJoiningBonus = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.clearJoiningBonus = function() {
  return this.setJoiningBonus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.offercomp.GetProjectionsRequest.prototype.hasJoiningBonus = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Bonus second_annual_joining_bonus = 7;
 * @return {?proto.offercomp.Bonus}
 */
proto.offercomp.GetProjectionsRequest.prototype.getSecondAnnualJoiningBonus = function() {
  return /** @type{?proto.offercomp.Bonus} */ (
    jspb.Message.getWrapperField(this, proto.offercomp.Bonus, 7));
};


/**
 * @param {?proto.offercomp.Bonus|undefined} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
*/
proto.offercomp.GetProjectionsRequest.prototype.setSecondAnnualJoiningBonus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.clearSecondAnnualJoiningBonus = function() {
  return this.setSecondAnnualJoiningBonus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.offercomp.GetProjectionsRequest.prototype.hasSecondAnnualJoiningBonus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional IncrementCycle increment_cycle = 8;
 * @return {?proto.offercomp.IncrementCycle}
 */
proto.offercomp.GetProjectionsRequest.prototype.getIncrementCycle = function() {
  return /** @type{?proto.offercomp.IncrementCycle} */ (
    jspb.Message.getWrapperField(this, proto.offercomp.IncrementCycle, 8));
};


/**
 * @param {?proto.offercomp.IncrementCycle|undefined} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
*/
proto.offercomp.GetProjectionsRequest.prototype.setIncrementCycle = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.clearIncrementCycle = function() {
  return this.setIncrementCycle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.offercomp.GetProjectionsRequest.prototype.hasIncrementCycle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string date_of_joining = 9;
 * @return {string}
 */
proto.offercomp.GetProjectionsRequest.prototype.getDateOfJoining = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.GetProjectionsRequest} returns this
 */
proto.offercomp.GetProjectionsRequest.prototype.setDateOfJoining = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.IncomeProjection.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.IncomeProjection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.IncomeProjection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.IncomeProjection.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    monthYear: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bonus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    basic: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hra: jspb.Message.getFieldWithDefault(msg, 5, 0),
    specialAllowance: jspb.Message.getFieldWithDefault(msg, 6, 0),
    others: jspb.Message.getFieldWithDefault(msg, 7, 0),
    totalBeforeDeductions: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.IncomeProjection}
 */
proto.offercomp.IncomeProjection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.IncomeProjection;
  return proto.offercomp.IncomeProjection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.IncomeProjection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.IncomeProjection}
 */
proto.offercomp.IncomeProjection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonthYear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBonus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBasic(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHra(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSpecialAllowance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOthers(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalBeforeDeductions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.IncomeProjection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.IncomeProjection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.IncomeProjection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.IncomeProjection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMonthYear();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBonus();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBasic();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getHra();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getSpecialAllowance();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getOthers();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTotalBeforeDeductions();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional int64 index = 1;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string month_year = 2;
 * @return {string}
 */
proto.offercomp.IncomeProjection.prototype.getMonthYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setMonthYear = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 bonus = 3;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getBonus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setBonus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 basic = 4;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getBasic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setBasic = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 hra = 5;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getHra = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setHra = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 special_allowance = 6;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getSpecialAllowance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setSpecialAllowance = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 others = 7;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getOthers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setOthers = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 total_before_deductions = 8;
 * @return {number}
 */
proto.offercomp.IncomeProjection.prototype.getTotalBeforeDeductions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.offercomp.IncomeProjection} returns this
 */
proto.offercomp.IncomeProjection.prototype.setTotalBeforeDeductions = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.IncomeProjectionRaw.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.IncomeProjectionRaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.IncomeProjectionRaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.IncomeProjectionRaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    monthYear: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bonus: jspb.Message.getFieldWithDefault(msg, 3, ""),
    basic: jspb.Message.getFieldWithDefault(msg, 4, ""),
    hra: jspb.Message.getFieldWithDefault(msg, 5, ""),
    specialAllowance: jspb.Message.getFieldWithDefault(msg, 6, ""),
    others: jspb.Message.getFieldWithDefault(msg, 7, ""),
    totalBeforeDeductions: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.IncomeProjectionRaw}
 */
proto.offercomp.IncomeProjectionRaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.IncomeProjectionRaw;
  return proto.offercomp.IncomeProjectionRaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.IncomeProjectionRaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.IncomeProjectionRaw}
 */
proto.offercomp.IncomeProjectionRaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonthYear(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBonus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasic(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHra(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpecialAllowance(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOthers(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalBeforeDeductions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.IncomeProjectionRaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.IncomeProjectionRaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.IncomeProjectionRaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.IncomeProjectionRaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMonthYear();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBonus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBasic();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHra();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSpecialAllowance();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOthers();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTotalBeforeDeductions();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string month_year = 2;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getMonthYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setMonthYear = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bonus = 3;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getBonus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setBonus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string basic = 4;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getBasic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setBasic = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string hra = 5;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getHra = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setHra = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string special_allowance = 6;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getSpecialAllowance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setSpecialAllowance = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string others = 7;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getOthers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setOthers = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string total_before_deductions = 8;
 * @return {string}
 */
proto.offercomp.IncomeProjectionRaw.prototype.getTotalBeforeDeductions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.offercomp.IncomeProjectionRaw} returns this
 */
proto.offercomp.IncomeProjectionRaw.prototype.setTotalBeforeDeductions = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.offercomp.GetProjectionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.GetProjectionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.GetProjectionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.GetProjectionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectionsList: jspb.Message.toObjectList(msg.getProjectionsList(),
    proto.offercomp.IncomeProjection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.GetProjectionsResponse}
 */
proto.offercomp.GetProjectionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.GetProjectionsResponse;
  return proto.offercomp.GetProjectionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.GetProjectionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.GetProjectionsResponse}
 */
proto.offercomp.GetProjectionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.offercomp.IncomeProjection;
      reader.readMessage(value,proto.offercomp.IncomeProjection.deserializeBinaryFromReader);
      msg.addProjections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.GetProjectionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.GetProjectionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.GetProjectionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.offercomp.IncomeProjection.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IncomeProjection projections = 1;
 * @return {!Array<!proto.offercomp.IncomeProjection>}
 */
proto.offercomp.GetProjectionsResponse.prototype.getProjectionsList = function() {
  return /** @type{!Array<!proto.offercomp.IncomeProjection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.offercomp.IncomeProjection, 1));
};


/**
 * @param {!Array<!proto.offercomp.IncomeProjection>} value
 * @return {!proto.offercomp.GetProjectionsResponse} returns this
*/
proto.offercomp.GetProjectionsResponse.prototype.setProjectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.offercomp.IncomeProjection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.offercomp.IncomeProjection}
 */
proto.offercomp.GetProjectionsResponse.prototype.addProjections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.offercomp.IncomeProjection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.offercomp.GetProjectionsResponse} returns this
 */
proto.offercomp.GetProjectionsResponse.prototype.clearProjectionsList = function() {
  return this.setProjectionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.GetProjectionsRawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.GetProjectionsRawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.GetProjectionsRawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsRawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputMap: (f = msg.getInputMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.GetProjectionsRawRequest}
 */
proto.offercomp.GetProjectionsRawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.GetProjectionsRawRequest;
  return proto.offercomp.GetProjectionsRawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.GetProjectionsRawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.GetProjectionsRawRequest}
 */
proto.offercomp.GetProjectionsRawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getInputMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.GetProjectionsRawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.GetProjectionsRawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.GetProjectionsRawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsRawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> input = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.offercomp.GetProjectionsRawRequest.prototype.getInputMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.offercomp.GetProjectionsRawRequest} returns this
 */
proto.offercomp.GetProjectionsRawRequest.prototype.clearInputMap = function() {
  this.getInputMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.offercomp.GetProjectionsRawResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.offercomp.GetProjectionsRawResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.offercomp.GetProjectionsRawResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.offercomp.GetProjectionsRawResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsRawResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectionsList: jspb.Message.toObjectList(msg.getProjectionsList(),
    proto.offercomp.IncomeProjectionRaw.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.offercomp.GetProjectionsRawResponse}
 */
proto.offercomp.GetProjectionsRawResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.offercomp.GetProjectionsRawResponse;
  return proto.offercomp.GetProjectionsRawResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.offercomp.GetProjectionsRawResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.offercomp.GetProjectionsRawResponse}
 */
proto.offercomp.GetProjectionsRawResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.offercomp.IncomeProjectionRaw;
      reader.readMessage(value,proto.offercomp.IncomeProjectionRaw.deserializeBinaryFromReader);
      msg.addProjections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.offercomp.GetProjectionsRawResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.offercomp.GetProjectionsRawResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.offercomp.GetProjectionsRawResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.offercomp.GetProjectionsRawResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.offercomp.IncomeProjectionRaw.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IncomeProjectionRaw projections = 1;
 * @return {!Array<!proto.offercomp.IncomeProjectionRaw>}
 */
proto.offercomp.GetProjectionsRawResponse.prototype.getProjectionsList = function() {
  return /** @type{!Array<!proto.offercomp.IncomeProjectionRaw>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.offercomp.IncomeProjectionRaw, 1));
};


/**
 * @param {!Array<!proto.offercomp.IncomeProjectionRaw>} value
 * @return {!proto.offercomp.GetProjectionsRawResponse} returns this
*/
proto.offercomp.GetProjectionsRawResponse.prototype.setProjectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.offercomp.IncomeProjectionRaw=} opt_value
 * @param {number=} opt_index
 * @return {!proto.offercomp.IncomeProjectionRaw}
 */
proto.offercomp.GetProjectionsRawResponse.prototype.addProjections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.offercomp.IncomeProjectionRaw, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.offercomp.GetProjectionsRawResponse} returns this
 */
proto.offercomp.GetProjectionsRawResponse.prototype.clearProjectionsList = function() {
  return this.setProjectionsList([]);
};


goog.object.extend(exports, proto.offercomp);
